[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace Bullseye
{
    public class OptionDefinition
    {
        public OptionDefinition(string shortName, string longName, string description) { }
        public string Description { get; }
        public string LongName { get; }
        public string ShortName { get; }
    }
    public class Targets
    {
        public Targets() { }
        public static System.Collections.Generic.IEnumerable<Bullseye.OptionDefinition> Options { get; }
        public void Add(string name, System.Collections.Generic.IEnumerable<string> dependsOn) { }
        public void Add(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Func<System.Threading.Tasks.Task> action) { }
        public void Add<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public void Add(string name, System.Func<System.Threading.Tasks.Task> action) { }
        public void Add(string name, System.Action action) { }
        public void Add<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public void Add<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
        public void Add(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Action action) { }
        public void Add<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
        public static string[] DependsOn(params string[] dependencies) { }
        public static TInput[] ForEach<TInput>(params TInput[] inputs) { }
        public void RunAndExit(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public void RunAndExit(System.Collections.Generic.IEnumerable<string> targets, System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public System.Threading.Tasks.Task RunAndExitAsync(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public System.Threading.Tasks.Task RunAndExitAsync(System.Collections.Generic.IEnumerable<string> targets, System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void RunTargetsAndExit(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void RunTargetsAndExit(System.Collections.Generic.IEnumerable<string> targets, System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync(System.Collections.Generic.IEnumerable<string> targets, System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void RunTargetsWithoutExiting(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void RunTargetsWithoutExiting(System.Collections.Generic.IEnumerable<string> targets, System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static System.Threading.Tasks.Task RunTargetsWithoutExitingAsync(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static System.Threading.Tasks.Task RunTargetsWithoutExitingAsync(System.Collections.Generic.IEnumerable<string> targets, System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public void RunWithoutExiting(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public void RunWithoutExiting(System.Collections.Generic.IEnumerable<string> targets, System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public System.Threading.Tasks.Task RunWithoutExitingAsync(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public System.Threading.Tasks.Task RunWithoutExitingAsync(System.Collections.Generic.IEnumerable<string> targets, System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void Target(string name, System.Func<System.Threading.Tasks.Task> action) { }
        public static void Target(string name, System.Action action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn) { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Func<System.Threading.Tasks.Task> action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Action action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
    }
}